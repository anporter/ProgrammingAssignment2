q()
~
list
lst
/
clear
install.packages("swirl")
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
q()
View(submit)
git clone --bare https://github.com/anporter/ProgrammingAssignment2.git
source (' cachematrix.R')
setwd("/Users/anporter/COursera/")
setwd("/Users/anporter/COursera/")
setwd("/Users/anporter/Coursera/Programmingassignment2")
setwd("/Users/anporter/Coursera/Programmingasignment2")
setwd("/Users/anporter/Coursera/ProgrammingAssignment2")
setwd("/Users/anporter/Coursera/ProgrammingAssignment2/")
source('cachematrix.R')
setwd("/Users/anporter/Coursera/ProgrammingAssignment2/")
setwd("/Users/anporter/ProgrammingAssignment2/")
source('cachematrix.R')
a <- makecachematrix(matix(c(2,0,0,2), c(2, 2)))
a <- makeCacheMatrix(matix(c(2,0,0,2), c(2, 2)))
cacheSolve(a)
source('cachematrix.R')
a <- makeCacheMatrix(matrix(c(2, 0, 0, 2), c(2, 2))
)
cacheSolve(a)
source('cahematrix.R')
source('cachematrix.R')
m <- makeCacheMatrix(matrix(c(2, 0, 0, 2), c(2, 2)))
cacheSolve(m)
makeCacheMatrix <- function(x = matrix)
)
makeCacheMatrix <- function(x = matrix()) {}
makeCacheMatrix <- function(x = matrix()) {
}
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {}
x<<- y
i<<- NULL
}
get <- function() x
setinverse <- function(inv) i <<- inv
getinvers <- function()
i
list (
set = set,
get = get,
setinverse = setinvers,
getinverse = getinverse
)
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x<<- y
i<<- NULL
}
get <- function() x
setinverse <- function(inv) i <<- inv
getinvers <- function()
i
list (
set = set,
get = get,
setinverse = setinvers,
getinverse = getinverse
)
}
cacheSolve <- function(x, ...) {}
cacheSolve <- function(x, ...) {
View(cacheSolve)
View(cacheSolve)
View(cacheSolve)
cacheSolve <- function(x, ...) {
i <- x$getinverse()
if(!is.null(i)) {
message ("getting cached data")
return(i)
}
m <- x$get()
i <- solve (m, ...)
x$setinverse(i)
i
}
)
cacheSolve <- function(x, ...) {
i <- x$getinverse()
if(!is.null(i)) {
message ("getting cached data")
return(i)
}
m <- x$get()
i <- solve (m, ...)
x$setinverse(i)
i
}
source('cachematrix.R')
m <- makeCacheMatrix(matrix(c(3, 0, 0, 3), c(3, 3)))
cacheSolve(m)
m <- makeCacheMatrix(matrix(c(2, 0, 0, 2), c(2, 2)))
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m$get
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data.")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setinverse(inv)
inv
}
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m$get()
?inverse
makeCacheMatrix <- function(x = matrix()) {
}
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x<<- y
i<<- NULL
}
get <- function() x
setinverse <- function(inv) i <<- inv
getinvers <- function()
i
list (
set = set,
get = get,
setinverse = setinverse,
getinverse = getinverse
)
}
cacheSolve <- function(x, ...) {
i <- x$getinverse()
if(!is.null(i)) {
message ("getting cached data")
return(i)
}
m <- x$get()
i <- solve (m, ...)
x$setinverse(i)
i
}
source('cachematrix.R')
m <- makeCacheMatrix(matrix(c(3, 0, 0, 3), c(3, 3)))
cacheSolve(m)
m <- makeCacheMatrix(matrix(c(3, 1 ), c(1, 3)))
cacheSolve(m)
makeCacheMatrix <- function(x = matrix()){
m <- NULL
set <- function(y) {
x <<- y
m<<- NULL
}
get <- funciton() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list( set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
makeCacheMatrix <- function(x = matrix()){
m <- NULL
set <- function(y) {
x <<- y
m<<- NULL
}
get <- funciton() x
get <- function() x
makeCacheMatrix <- function(x = matrix()){
m <- NULL
set <- function(y) {
x <<- y
m<<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list ( set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
makeCacheMatrix <- function(x = matrix()){
m <- NULL
set <- function(y) {
x <<- y
m<<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list ( set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...){
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(Data, ...)
X$setinverse(m)
m
}
m <- makeCacheMatrix()
m$set(matrix(1:4), 2,2))
m$set(matrix(1:4), 2,2)
m$set(matrix(1:4),2,2)
m$set(matrix(1:4,2,2)
)
cacheSolve(m)
rm(m)
cacheSolve(m)
makeCacheMatrix <- function(x = matrix()){
m <- NULL
set <- function(y) {
x <<- y
m<<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list ( set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...){
dm <- x$getinverse()
if(!is.null(dm)) {
message("getting cached data")
return(dm)
}
data <- x$get()
dm <- solve(Data, ...)
X$setinverse(dm)
dm
}
m <- makeCacheMatrix()
m$set(matrix(1:4), 2,2))
m <- makeCacheMatrix()
m$set(matrix(1:4,2,2))
cacheSolve(m)
makeCacheMatrix <- function(x = matrix()){
m <- NULL
set <- function(y) {
x <<- y
m<<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list ( set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...){
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(Data, ...)
X$setinverse(m)
m
}
x = rbind(c(1, 3), c(3, 1))
m = makeCacheMatrix(x)
m$get()
x = rbind(c(1, 3, 2), c(3, 2, 1))
m = makeCacheMatrix(x)
m$get()
makeCacheMatrix <- function(x = matrix()){
Andre <- NULL
set <- function(y) {
x <<- y
Andre<<- NULL
}
get <- function() x
setinverse <- function(inverse) Andre <<- inverse
getinverse <- function() Andre
list ( set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...){
Andre <- x$getinverse()
if(!is.null(Andre)) {
message("getting cached data")
return(Andre)
}
data <- x$get()
Andre <- solve(Data, ...)
X$setinverse(m)
Andre
}
x = rbind(c(1, 3), c(3, 1))
m <- makeCacheMatrix(x)
makeCacheMatrix <- function(x = matrix()){
Andre <- NULL
set <- function(y) {
x <<- y
Andre<<- NULL
}
get <- function() x
setinverse <- function(inverse) Andre <<- inverse
getinverse <- function() Andre
list ( set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...){
Andre <- x$getinverse()
if(!is.null(Andre)) {
message("getting cached data")
return(Andre)
}
data <- x$get()
Andre <- solve(Data, ...)
X$setinverse(Andre)
Andre
}
x = rbind(c(1, 3), c(3, 1))
Andre <- makeCacheMatrix(x)
Andre$get()
x = rbind(c(1, 2, 3, 4, 5, 6, 7, 8, 9), c(9, 8, 7, 6, 5, 4, 3, 2, 1))
Andre <- makeCacheMatrix(x)
Andre$get()
Andre <- makeCacheMatrix(matrix(c(2, 0, 0,2), c(2,2)))
cacheSolve(Andre)
makeCacheMatrix <- function(x = matrix()){
Andre <- NULL
set <- function(y) {
x <<- y
Andre<<- NULL
}
get <- function() x
setinverse <- function(inverse) Andre <<- inverse
getinverse <- function() Andre
list ( set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...){
Andre <- x$getinverse()
if(!is.null(Andre)) {
message("getting cached data")
return(Andre)
}
data <- x$get()
Andre <- solve(Data, ...)
X$setinverse(Andre)
Andre
}
